pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import sklearn
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, mean_squared_error, r2_score

from google.colab import drive
drive.mount('/content/drive/')

"""# Build UI"""

st.title('Data-Driven Analysis and Prediction Models for Solar Power Generation in Green Communities')
st.header('DATA 298-B Demo 2 - Team 7')
st.subheader('Show the predictions generated by the Machine Learning Models using the demo data and the performance metrics.')

%%writefile solar_app.py
import streamlit as st
import pandas as pd
import numpy as np
import pickle
import sklearn
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_absolute_percentage_error, mean_squared_error, r2_score

def GetWeeklyOutput(test_data,predictionData):
  """
  The function takes hourly test data and hourly predictions
  and retruns weekly test data and weekly predictions
  """
  df = test_data[['Month','date']]
  df['prediction'] = predictionData
  # Convert the date column to a datetime format
  df['date'] = pd.to_datetime(df['date'])

  # Set the date column as the index column
  df.set_index('date', inplace=True)

  # Resample to weekly intervals
  weekly_df = df.resample('W').mean()
  weekly_df.drop(columns='Month',inplace=True)

  return weekly_df

def GetMonthlyOutput(test_data,predictionData):
  """
  The function takes hourly test data and hourly predictions
  and retruns monthly test data and monthly predictions
  """
  df = test_data[['Month','date']]
  df['prediction'] = predictionData
  # Convert the date column to a datetime format
  df['date'] = pd.to_datetime(df['date'])

  # Set the date column as the index column
  df.set_index('date', inplace=True)

  # Resample to weekly intervals
  monthly_df = df.resample('M').mean()
  monthly_df.drop(columns='Month',inplace=True)

  return monthly_df

def ConvertInputTotest(x_test):
  """
  Use the input file to transform for SVR
  """
  from sklearn.preprocessing import StandardScaler
  sc_X = StandardScaler()
  x_test=x_test.to_numpy()
  x_test_transformed = sc_X.fit_transform(x_test)
  return x_test_transformed

# loading saved models from local drive 

filename_rf           = './drive/Shareddrives/DATA 298A/models/rf_random_stddata_model.pkl'
filename_2step_rf     = '/content/drive/Shareddrives/DATA 298A/pickle files/Pickle_TwoStep_rf_Model.pkl'
filename_2step_svr    = '/content/drive/Shareddrives/DATA 298A/pickle files/Pickle_TwoStep_SVR_Model.pkl'
model_rf              = pickle.load(open(filename_rf, 'rb'))
model_2step_rf        = pickle.load(open(filename_2step_rf, 'rb'))
model_2step_svr       = pickle.load(open(filename_2step_svr, 'rb'))

from sklearn.preprocessing import StandardScaler
train_stdf0 = pd.read_csv('./drive/Shareddrives/DATA 298A/DATA/train_stdf.csv')
y_train_svr = train_stdf0['output']
y_train_svr=y_train_svr.to_numpy()
y_train_svr = y_train_svr.reshape(-1,1)
sc_y = StandardScaler()
y = sc_y.fit_transform(y_train_svr)

# Define the contents of the first tab
def tab1():
    st.markdown(
        """
        # Data-Driven Analysis and Prediction Models for Solar Power Generation in Green Communities
        ## Shows the predictions generated by the Machine Learning Models using the demo data and the performance metrics
        ### Dashboard
        - click here to visit dashboard [dashboard.io](https://public.tableau.com/app/profile/chidroop.sagar/viz/DataAnalysisofSolarPowerPrediction/TestDataPrediction#1)
        """
    )
# Define the contents of the second tab
def tab2():
   st.header("Predict Solar Radiation with GHI and weather parametrs")
   purpose1 = 'Get Predictions of test data'
   purpose2 = 'Get predictions with data input'
   pick_purpose = st.radio("Predict1: ", (purpose1, purpose2))
   if (pick_purpose == purpose1):
       st.success(purpose1)
       st.subheader("Solar Power Generation Predictions of test data")
       st.write('Monthly average predictions', monthly_average_rf)
       st.write ('coefficient of determination R^2 for hourly predictions ',0.97)
       st.write ('coefficient of determination R^2 for monthly average ',0.95)
   else:
       st.success(purpose2)
       uploaded_files = st.file_uploader("Choose a CSV file")
       
       if st.button('Display Test DATA'):
           test_data= pd.read_csv(uploaded_files)
           st.write('Top 5 rows of Test DATA', test_data.head())
       if st.button('Get Monthly Prediction using RandomForestRegressor'):
           test_data= pd.read_csv(uploaded_files)
           x_test = test_data.drop(columns='date')
           y_pred = model_rf.predict(x_test)
           monthly_df = GetMonthlyOutput(test_data,y_pred)
           st.write('Monthly average of Solar Power Generation Predictions', monthly_df)
       if st.button('Get weekly Prediction using RandomForestRegressor'):
           test_data= pd.read_csv(uploaded_files)
           x_test = test_data.drop(columns='date')
           y_pred = model_rf.predict(x_test)
           weekly_df = GetWeeklyOutput(test_data,y_pred)
           st.write('Weekly average of Solar Power Generation Predictions', weekly_df)

# Define the contents of the third tab
def tab3():
   st.header("Two step Prediction")
   st.subheader("Step-1 Using weather data to Predict GHI")
   st.subheader("Step-2 Using GHI from step-1 to Predict Solar Power Generation")
   purpose3 = 'Get Predictions of test data'
   purpose4 = 'Get predictions with data input'
   pick_purpose_2 = st.radio("Predict2: ", (purpose3, purpose4))
   if (pick_purpose_2 == purpose3):
       st.success(purpose3)
       st.subheader("Solar Power Generation Predictions of test data")
       st.write('Monthly average predictions', monthly_average_2step)
       st.write ('coefficient of determination R^2 for hourly predictions ',0.95)
       st.write ('coefficient of determination R^2 for monthly average ',0.92)
   else:
       st.success(purpose4)
       uploaded_file_2step = st.file_uploader("Choose CSV file for 2 step prediction")
       
       if st.button('Display Test DATA for 2 step prediction'):
           test_data= pd.read_csv(uploaded_file_2step)
           df= test_data.drop(columns=['GHI','solarradiation'])
           st.write('Top 5 rows of Test DATA', df.head())
       if st.button('Make monthly Prediction using 2 step'):
           test_data= pd.read_csv(uploaded_file_2step)
           x_test = test_data.drop(columns=['date','solarradiation'])
           y_pred_rf = model_2step_rf.predict(x_test)
           x_test_rf_output = test_data[['Month','Day','Hour','solarradiation']]
           x_test_rf_output['solarradiation']= y_pred_rf
           x_test_final = ConvertInputTotest(x_test_rf_output)
           y_pred = model_2step_svr.predict(x_test_final)
           y_pred=y_pred.reshape(-1,1)
           y_pred = sc_y.inverse_transform(y_pred)
           monthly_df = GetMonthlyOutput(test_data,y_pred)
           st.write('Monthly average of Solar Power Generation Predictions', monthly_df)
       if st.button('Make weekly Prediction using 2 step'):
           test_data= pd.read_csv(uploaded_file_2step)
           x_test = test_data.drop(columns=['date','solarradiation'])
           y_pred_rf = model_2step_rf.predict(x_test)
           x_test_rf_output = test_data[['Month','Day','Hour','solarradiation']]
           x_test_rf_output['solarradiation']= y_pred_rf
           x_test_final = ConvertInputTotest(x_test_rf_output)
           y_pred = model_2step_svr.predict(x_test_final)
           y_pred=y_pred.reshape(-1,1)
           y_pred = sc_y.inverse_transform(y_pred)
           weekly_df = GetWeeklyOutput(test_data,y_pred)
           st.write('weekly average of Solar Power Generation Predictions', weekly_df)

# Define the tabs in the sidebar
tabs = {'-': tab1,
        'Solar Power Prediction Using GHI & weather Parameters': tab2,
        'Two Step Prediction': tab3}

# Set up the sidebar with the tabs
st.sidebar.title('DATA 298-B- Team 7')
selected_tab = st.sidebar.selectbox('Select a tab', list(tabs.keys()))

# Call the function for the selected tab
tabs[selected_tab]()

"""# Run the App"""

!pip install -q streamlit

!npm install localtunnel

# run streamlit in the background
!streamlit run /content/solar_app.py &>/content/logs.txt &

# click on the url showed
!npx localtunnel --port 8501
